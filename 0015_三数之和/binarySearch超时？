class Solution(object):
    def binarySearch(self, nums, left, right, target):
        while left <= right:
            mid = (left + right) // 2
            if nums[mid] == target:
                return mid
            elif nums[mid] < target:
                left = mid + 1
            else:
                right = mid - 1
        return -1

    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """

        nums.sort()
        n = len(nums)
        ans = []
        for first in range(n):
            if nums[first] > 0:
                break
            if first > 0 and nums[first] == nums[first - 1]:
                continue
            for second in range(first + 1, n):
                if nums[first] + nums[second] > 0:
                    break
                if second > first + 1 and nums[second] == nums[second - 1]:
                    continue
                third = self.binarySearch(nums, second + 1, n - 1, -nums[first]-nums[second])
                if third != -1:
                    ans.append([nums[first], nums[second], nums[third]])
        return ans
